{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Predict Credit Scoring"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Вашей задачей будет построить скоринг модель для вторичных клиентов банка, которая бы предсказывала вероятность дефолта клиента. Для этого нужно будет определить значимые параметры заемщика.\n",
    "\n",
    "## Условия соревнования:\n",
    "- Данное соревнование является бессрочным и доступно для всех потоков.\n",
    "- Срок выполнения соревнования устанавливается индивидуально в каждом потоке.\n",
    "- Тестовая выборка представлена в ЛидерБорде целиком.\n",
    "- Поэтому лучшие и победные решения буду проверяться на их \"адекватность\" (чтоб не было подгонки под тестовую выборку).\n",
    "- Разрешено использовать любые ML алгоритмы и библиотеки (кроме DL).\n",
    "- Делаем реальный ML продукт, который потом сможет нормально работать на новых данных."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Import"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/sf-dst-scoring/sample_submission.csv\n",
      "/kaggle/input/sf-dst-scoring/train.csv\n",
      "/kaggle/input/sf-dst-scoring/test.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import pandas as pd # библиотека для работы с файлами csv\n",
    "import numpy as np # линейная алгебра\n",
    "\n",
    "# Библиотеки для визулизации данных\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%matplotlib inline\n",
    "\n",
    "# Библиотеки для обработки признаков\n",
    "from sklearn.feature_selection import f_classif, mutual_info_classif\n",
    "from sklearn.preprocessing import LabelEncoder, OneHotEncoder, StandardScaler\n",
    "\n",
    "# Библиотеки для работы с ML\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import RandomizedSearchCV\n",
    "\n",
    "# Библиотеки метрик\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import auc, roc_auc_score, roc_curve\n",
    "from scipy.stats import zscore\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# Any results you write to the current directory are saved as output."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# всегда фиксируйте RANDOM_SEED, чтобы ваши эксперименты были воспроизводимы!\n",
    "RANDOM_SEED = 42"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# зафиксируем версию пакетов, чтобы эксперименты были воспроизводимы:\n",
    "!pip freeze > requirements.txt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## DATA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "DATA_DIR = '/kaggle/input/sf-dst-scoring/'\n",
    "df_train = pd.read_csv(DATA_DIR+'/train.csv')\n",
    "df_test = pd.read_csv(DATA_DIR+'test.csv')\n",
    "sample_submission = pd.read_csv(DATA_DIR+'/sample_submission.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 73799 entries, 0 to 73798\n",
      "Data columns (total 19 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   client_id         73799 non-null  int64  \n",
      " 1   app_date          73799 non-null  object \n",
      " 2   education         73492 non-null  object \n",
      " 3   sex               73799 non-null  object \n",
      " 4   age               73799 non-null  int64  \n",
      " 5   car               73799 non-null  object \n",
      " 6   car_type          73799 non-null  object \n",
      " 7   decline_app_cnt   73799 non-null  int64  \n",
      " 8   good_work         73799 non-null  int64  \n",
      " 9   score_bki         73799 non-null  float64\n",
      " 10  bki_request_cnt   73799 non-null  int64  \n",
      " 11  region_rating     73799 non-null  int64  \n",
      " 12  home_address      73799 non-null  int64  \n",
      " 13  work_address      73799 non-null  int64  \n",
      " 14  income            73799 non-null  int64  \n",
      " 15  sna               73799 non-null  int64  \n",
      " 16  first_time        73799 non-null  int64  \n",
      " 17  foreign_passport  73799 non-null  object \n",
      " 18  default           73799 non-null  int64  \n",
      "dtypes: float64(1), int64(12), object(6)\n",
      "memory usage: 10.7+ MB\n"
     ]
    }
   ],
   "source": [
    "df_train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>app_date</th>\n",
       "      <th>education</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>car</th>\n",
       "      <th>car_type</th>\n",
       "      <th>decline_app_cnt</th>\n",
       "      <th>good_work</th>\n",
       "      <th>score_bki</th>\n",
       "      <th>bki_request_cnt</th>\n",
       "      <th>region_rating</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>income</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>foreign_passport</th>\n",
       "      <th>default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>25905</td>\n",
       "      <td>01FEB2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>M</td>\n",
       "      <td>62</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.008753</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>18000</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>63161</td>\n",
       "      <td>12MAR2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>F</td>\n",
       "      <td>59</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.532276</td>\n",
       "      <td>3</td>\n",
       "      <td>50</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>19000</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>25887</td>\n",
       "      <td>01FEB2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.408142</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>30000</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16222</td>\n",
       "      <td>23JAN2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>F</td>\n",
       "      <td>53</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.057471</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>10000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>101655</td>\n",
       "      <td>18APR2014</td>\n",
       "      <td>GRD</td>\n",
       "      <td>M</td>\n",
       "      <td>48</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-1.244723</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>30000</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   client_id   app_date education sex  age car car_type  decline_app_cnt  \\\n",
       "0      25905  01FEB2014       SCH   M   62   Y        Y                0   \n",
       "1      63161  12MAR2014       SCH   F   59   N        N                0   \n",
       "2      25887  01FEB2014       SCH   M   25   Y        N                2   \n",
       "3      16222  23JAN2014       SCH   F   53   N        N                0   \n",
       "4     101655  18APR2014       GRD   M   48   N        N                0   \n",
       "\n",
       "   good_work  score_bki  bki_request_cnt  region_rating  home_address  \\\n",
       "0          0  -2.008753                1             50             1   \n",
       "1          0  -1.532276                3             50             2   \n",
       "2          0  -1.408142                1             80             1   \n",
       "3          0  -2.057471                2             50             2   \n",
       "4          1  -1.244723                1             60             2   \n",
       "\n",
       "   work_address  income  sna  first_time foreign_passport  default  \n",
       "0             2   18000    4           1                N        0  \n",
       "1             3   19000    4           1                N        0  \n",
       "2             2   30000    1           4                Y        0  \n",
       "3             3   10000    1           3                N        0  \n",
       "4             3   30000    1           4                Y        0  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 36349 entries, 0 to 36348\n",
      "Data columns (total 18 columns):\n",
      " #   Column            Non-Null Count  Dtype  \n",
      "---  ------            --------------  -----  \n",
      " 0   client_id         36349 non-null  int64  \n",
      " 1   app_date          36349 non-null  object \n",
      " 2   education         36178 non-null  object \n",
      " 3   sex               36349 non-null  object \n",
      " 4   age               36349 non-null  int64  \n",
      " 5   car               36349 non-null  object \n",
      " 6   car_type          36349 non-null  object \n",
      " 7   decline_app_cnt   36349 non-null  int64  \n",
      " 8   good_work         36349 non-null  int64  \n",
      " 9   score_bki         36349 non-null  float64\n",
      " 10  bki_request_cnt   36349 non-null  int64  \n",
      " 11  region_rating     36349 non-null  int64  \n",
      " 12  home_address      36349 non-null  int64  \n",
      " 13  work_address      36349 non-null  int64  \n",
      " 14  income            36349 non-null  int64  \n",
      " 15  sna               36349 non-null  int64  \n",
      " 16  first_time        36349 non-null  int64  \n",
      " 17  foreign_passport  36349 non-null  object \n",
      "dtypes: float64(1), int64(11), object(6)\n",
      "memory usage: 5.0+ MB\n"
     ]
    }
   ],
   "source": [
    "df_test.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>app_date</th>\n",
       "      <th>education</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>car</th>\n",
       "      <th>car_type</th>\n",
       "      <th>decline_app_cnt</th>\n",
       "      <th>good_work</th>\n",
       "      <th>score_bki</th>\n",
       "      <th>bki_request_cnt</th>\n",
       "      <th>region_rating</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>income</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>foreign_passport</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>74835</td>\n",
       "      <td>22MAR2014</td>\n",
       "      <td>GRD</td>\n",
       "      <td>M</td>\n",
       "      <td>29</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.271884</td>\n",
       "      <td>3</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17527</td>\n",
       "      <td>24JAN2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>F</td>\n",
       "      <td>39</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.504999</td>\n",
       "      <td>2</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5000</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75683</td>\n",
       "      <td>23MAR2014</td>\n",
       "      <td>UGR</td>\n",
       "      <td>M</td>\n",
       "      <td>50</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.691339</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>30000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Y</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26883</td>\n",
       "      <td>03FEB2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>M</td>\n",
       "      <td>56</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.374182</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28862</td>\n",
       "      <td>04FEB2014</td>\n",
       "      <td>GRD</td>\n",
       "      <td>F</td>\n",
       "      <td>38</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.487502</td>\n",
       "      <td>0</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>120000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   client_id   app_date education sex  age car car_type  decline_app_cnt  \\\n",
       "0      74835  22MAR2014       GRD   M   29   Y        Y                0   \n",
       "1      17527  24JAN2014       SCH   F   39   N        N                5   \n",
       "2      75683  23MAR2014       UGR   M   50   Y        Y                0   \n",
       "3      26883  03FEB2014       SCH   M   56   N        N                0   \n",
       "4      28862  04FEB2014       GRD   F   38   N        N                0   \n",
       "\n",
       "   good_work  score_bki  bki_request_cnt  region_rating  home_address  \\\n",
       "0          0  -2.271884                3             50             1   \n",
       "1          0  -1.504999                2             50             1   \n",
       "2          0  -1.691339                1             50             1   \n",
       "3          0  -2.374182                1             40             1   \n",
       "4          0  -2.487502                0             80             2   \n",
       "\n",
       "   work_address  income  sna  first_time foreign_passport  \n",
       "0             2   50000    1           4                N  \n",
       "1             2    5000    4           3                N  \n",
       "2             2   30000    1           3                Y  \n",
       "3             2   17000    1           3                N  \n",
       "4             3  120000    1           3                N  "
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_test.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 24354 entries, 0 to 24353\n",
      "Data columns (total 2 columns):\n",
      " #   Column     Non-Null Count  Dtype  \n",
      "---  ------     --------------  -----  \n",
      " 0   client_id  24354 non-null  int64  \n",
      " 1   default    24354 non-null  float64\n",
      "dtypes: float64(1), int64(1)\n",
      "memory usage: 380.7 KB\n"
     ]
    }
   ],
   "source": [
    "sample_submission.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>66799</td>\n",
       "      <td>0.441004</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>25379</td>\n",
       "      <td>0.138092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>28825</td>\n",
       "      <td>0.373370</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>37530</td>\n",
       "      <td>0.476501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4264</td>\n",
       "      <td>0.304640</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   client_id   default\n",
       "0      66799  0.441004\n",
       "1      25379  0.138092\n",
       "2      28825  0.373370\n",
       "3      37530  0.476501\n",
       "4       4264  0.304640"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ВАЖНО! дря корректной обработки признаков объединяем трейн и тест в один датасет\n",
    "df_train['sample'] = 1 # помечаем где у нас трейн\n",
    "df_test['sample'] = 0 # помечаем где у нас тест\n",
    "df_test['default'] = -1 # в тесте у нас нет значения defaultg, мы его должны предсказать, по этому пока просто заполняем -1\n",
    "\n",
    "data = df_test.append(df_train, sort=False).reset_index(drop=True) # объединяем"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 110148 entries, 0 to 110147\n",
      "Data columns (total 20 columns):\n",
      " #   Column            Non-Null Count   Dtype  \n",
      "---  ------            --------------   -----  \n",
      " 0   client_id         110148 non-null  int64  \n",
      " 1   app_date          110148 non-null  object \n",
      " 2   education         109670 non-null  object \n",
      " 3   sex               110148 non-null  object \n",
      " 4   age               110148 non-null  int64  \n",
      " 5   car               110148 non-null  object \n",
      " 6   car_type          110148 non-null  object \n",
      " 7   decline_app_cnt   110148 non-null  int64  \n",
      " 8   good_work         110148 non-null  int64  \n",
      " 9   score_bki         110148 non-null  float64\n",
      " 10  bki_request_cnt   110148 non-null  int64  \n",
      " 11  region_rating     110148 non-null  int64  \n",
      " 12  home_address      110148 non-null  int64  \n",
      " 13  work_address      110148 non-null  int64  \n",
      " 14  income            110148 non-null  int64  \n",
      " 15  sna               110148 non-null  int64  \n",
      " 16  first_time        110148 non-null  int64  \n",
      " 17  foreign_passport  110148 non-null  object \n",
      " 18  sample            110148 non-null  int64  \n",
      " 19  default           110148 non-null  int64  \n",
      "dtypes: float64(1), int64(13), object(6)\n",
      "memory usage: 16.8+ MB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Описания полей\n",
    "\n",
    "- client_id - идентификатор клиента\n",
    "- education - уровень образования\n",
    "- sex - пол заемщика\n",
    "- age - возраст заемщика\n",
    "- car - флаг наличия автомобиля\n",
    "- car_type - флаг автомобиля иномарки\n",
    "- decline_app_cnt - количество отказанных прошлых заявок\n",
    "- good_work - флаг наличия “хорошей” работы\n",
    "- bki_request_cnt - количество запросов в БКИ\n",
    "- home_address - категоризатор домашнего адреса\n",
    "- work_address - категоризатор рабочего адреса\n",
    "- income - доход заемщика\n",
    "- foreign_passport - наличие загранпаспорта\n",
    "- sna - связь заемщика с клиентами банка\n",
    "- first_time - давность наличия информации о заемщике\n",
    "- score_bki - скоринговый балл по данным из БКИ\n",
    "- region_rating - рейтинг региона\n",
    "- app_date - дата подачи заявки\n",
    "- default - флаг дефолта по кредиту"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>app_date</th>\n",
       "      <th>education</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>car</th>\n",
       "      <th>car_type</th>\n",
       "      <th>decline_app_cnt</th>\n",
       "      <th>good_work</th>\n",
       "      <th>score_bki</th>\n",
       "      <th>bki_request_cnt</th>\n",
       "      <th>region_rating</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>income</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>foreign_passport</th>\n",
       "      <th>sample</th>\n",
       "      <th>default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>51473</th>\n",
       "      <td>81808</td>\n",
       "      <td>29MAR2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>F</td>\n",
       "      <td>27</td>\n",
       "      <td>Y</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.855187</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>90000</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34751</th>\n",
       "      <td>82044</td>\n",
       "      <td>30MAR2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>F</td>\n",
       "      <td>35</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.234677</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5000</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>104528</th>\n",
       "      <td>86725</td>\n",
       "      <td>03APR2014</td>\n",
       "      <td>GRD</td>\n",
       "      <td>F</td>\n",
       "      <td>34</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.091885</td>\n",
       "      <td>1</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>35000</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53675</th>\n",
       "      <td>91645</td>\n",
       "      <td>08APR2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>M</td>\n",
       "      <td>60</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.442710</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>13500</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5942</th>\n",
       "      <td>9482</td>\n",
       "      <td>16JAN2014</td>\n",
       "      <td>SCH</td>\n",
       "      <td>M</td>\n",
       "      <td>53</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.775263</td>\n",
       "      <td>5</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>20000</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        client_id   app_date education sex  age car car_type  decline_app_cnt  \\\n",
       "51473       81808  29MAR2014       SCH   F   27   Y        N                0   \n",
       "34751       82044  30MAR2014       SCH   F   35   N        N                0   \n",
       "104528      86725  03APR2014       GRD   F   34   Y        Y                1   \n",
       "53675       91645  08APR2014       SCH   M   60   N        N                0   \n",
       "5942         9482  16JAN2014       SCH   M   53   N        N                0   \n",
       "\n",
       "        good_work  score_bki  bki_request_cnt  region_rating  home_address  \\\n",
       "51473           0  -1.855187                1             80             2   \n",
       "34751           0  -2.234677                1             40             1   \n",
       "104528          0  -1.091885                1             60             2   \n",
       "53675           0  -2.442710                1             40             2   \n",
       "5942            0  -1.775263                5             60             2   \n",
       "\n",
       "        work_address  income  sna  first_time foreign_passport  sample  \\\n",
       "51473              2   90000    2           2                Y       1   \n",
       "34751              2    5000    1           4                N       0   \n",
       "104528             3   35000    2           3                N       1   \n",
       "53675              3   13500    1           3                N       1   \n",
       "5942               3   20000    4           1                N       0   \n",
       "\n",
       "        default  \n",
       "51473         0  \n",
       "34751        -1  \n",
       "104528        0  \n",
       "53675         0  \n",
       "5942         -1  "
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как видим, большинство признаков у нас требует очистки и предварительной обработки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c66485f90>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.default.hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Processing"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка NAN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "client_id             0\n",
       "app_date              0\n",
       "education           478\n",
       "sex                   0\n",
       "age                   0\n",
       "car                   0\n",
       "car_type              0\n",
       "decline_app_cnt       0\n",
       "good_work             0\n",
       "score_bki             0\n",
       "bki_request_cnt       0\n",
       "region_rating         0\n",
       "home_address          0\n",
       "work_address          0\n",
       "income                0\n",
       "sna                   0\n",
       "first_time            0\n",
       "foreign_passport      0\n",
       "sample                0\n",
       "default               0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum(axis = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c662c44d0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.education.value_counts().plot.barh()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "Давайте заполним его \"unknown\" значением"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['education'].fillna('UNK', inplace=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Обработка признаков"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Так ка ранее мы уже обрабатывали большинство признаков и знаем к какой категории они относятся, посмотрим внимательнее новые признаки."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    70681\n",
       "4    17481\n",
       "2    15832\n",
       "3     6154\n",
       "Name: sna, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.sna.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c661d8890>"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.sna.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    46588\n",
       "4    28017\n",
       "1    18296\n",
       "2    17247\n",
       "Name: first_time, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.first_time.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c66187890>"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.first_time.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.775263    517\n",
       "-2.104211    454\n",
       "-2.225004    424\n",
       "-2.169664    375\n",
       "-2.024100    278\n",
       "            ... \n",
       "-1.916044      1\n",
       "-2.142259      1\n",
       "-1.227466      1\n",
       "-2.709566      1\n",
       "-2.295169      1\n",
       "Name: score_bki, Length: 102618, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.score_bki.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c65d37190>"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.score_bki.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c65c90450>"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data.region_rating.hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    22MAR2014\n",
       "1    24JAN2014\n",
       "2    23MAR2014\n",
       "3    03FEB2014\n",
       "4    04FEB2014\n",
       "Name: app_date, dtype: object"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.app_date.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Преобразование app_date в тип datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.7/site-packages/ipykernel_launcher.py:2: FutureWarning: Treating datetime data as categorical rather than numeric in `.describe` is deprecated and will be removed in a future version of pandas. Specify `datetime_is_numeric=True` to silence this warning and adopt the future behavior now.\n",
      "  \n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count                  110148\n",
       "unique                    120\n",
       "top       2014-03-18 00:00:00\n",
       "freq                     1491\n",
       "first     2014-01-01 00:00:00\n",
       "last      2014-04-30 00:00:00\n",
       "Name: app_date, dtype: object"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.app_date = pd.to_datetime(data.app_date)\n",
    "data.app_date.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для дальнейшей работы можем выделить из данного признака новые, такие как: месяц и день недели. Год рассматривать нет смысла, так как мы видим, что и ранняя и поздняя даты за 2014г."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "data[\"app_day_month\"] = data.app_date.dt.month "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>app_date</th>\n",
       "      <th>education</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>car</th>\n",
       "      <th>car_type</th>\n",
       "      <th>decline_app_cnt</th>\n",
       "      <th>good_work</th>\n",
       "      <th>score_bki</th>\n",
       "      <th>...</th>\n",
       "      <th>region_rating</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>income</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>foreign_passport</th>\n",
       "      <th>sample</th>\n",
       "      <th>default</th>\n",
       "      <th>app_day_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>74835</td>\n",
       "      <td>2014-03-22</td>\n",
       "      <td>GRD</td>\n",
       "      <td>M</td>\n",
       "      <td>29</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.271884</td>\n",
       "      <td>...</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>50000</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17527</td>\n",
       "      <td>2014-01-24</td>\n",
       "      <td>SCH</td>\n",
       "      <td>F</td>\n",
       "      <td>39</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.504999</td>\n",
       "      <td>...</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>5000</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75683</td>\n",
       "      <td>2014-03-23</td>\n",
       "      <td>UGR</td>\n",
       "      <td>M</td>\n",
       "      <td>50</td>\n",
       "      <td>Y</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.691339</td>\n",
       "      <td>...</td>\n",
       "      <td>50</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>30000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Y</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26883</td>\n",
       "      <td>2014-02-03</td>\n",
       "      <td>SCH</td>\n",
       "      <td>M</td>\n",
       "      <td>56</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.374182</td>\n",
       "      <td>...</td>\n",
       "      <td>40</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>17000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28862</td>\n",
       "      <td>2014-02-04</td>\n",
       "      <td>GRD</td>\n",
       "      <td>F</td>\n",
       "      <td>38</td>\n",
       "      <td>N</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.487502</td>\n",
       "      <td>...</td>\n",
       "      <td>80</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>120000</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>N</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   client_id   app_date education sex  age car car_type  decline_app_cnt  \\\n",
       "0      74835 2014-03-22       GRD   M   29   Y        Y                0   \n",
       "1      17527 2014-01-24       SCH   F   39   N        N                5   \n",
       "2      75683 2014-03-23       UGR   M   50   Y        Y                0   \n",
       "3      26883 2014-02-03       SCH   M   56   N        N                0   \n",
       "4      28862 2014-02-04       GRD   F   38   N        N                0   \n",
       "\n",
       "   good_work  score_bki  ...  region_rating  home_address  work_address  \\\n",
       "0          0  -2.271884  ...             50             1             2   \n",
       "1          0  -1.504999  ...             50             1             2   \n",
       "2          0  -1.691339  ...             50             1             2   \n",
       "3          0  -2.374182  ...             40             1             2   \n",
       "4          0  -2.487502  ...             80             2             3   \n",
       "\n",
       "   income  sna  first_time  foreign_passport sample  default  app_day_month  \n",
       "0   50000    1           4                 N      0       -1              3  \n",
       "1    5000    4           3                 N      0       -1              1  \n",
       "2   30000    1           3                 Y      0       -1              3  \n",
       "3   17000    1           3                 N      0       -1              2  \n",
       "4  120000    1           3                 N      0       -1              2  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3    31597\n",
       "2    27097\n",
       "4    26266\n",
       "1    25188\n",
       "Name: app_day_month, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[\"app_day_month\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c65d18f50>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data[\"app_day_month\"].hist()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Группируем признаки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "# бинарные переменные\n",
    "bin_cols = ['sex', 'car', 'car_type', 'foreign_passport', 'good_work']\n",
    "\n",
    "# категориальные переменные\n",
    "cat_cols = ['education', 'home_address', 'work_address', 'sna', 'first_time', 'app_day_month']\n",
    "\n",
    "# числовые переменные\n",
    "num_cols = ['age', 'decline_app_cnt', 'score_bki', 'region_rating', 'bki_request_cnt', 'income']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Числовые признаки"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Посмотрим на распределение числовых переменных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "data_default = data[data.default >= 0]\n",
    "for i in num_cols:\n",
    "    plt.figure()\n",
    "    sns.distplot(data_default[i][data_default[i] > 0].dropna(), kde = False, rug=False)\n",
    "    plt.title(i)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "У большинства параметров видим большой хвост справа, для лучшей работы нашей будущей модели логарифмируем параметры."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "for i in ['age', 'decline_app_cnt', 'region_rating', 'bki_request_cnt', 'income']:\n",
    "    data[i] = np.log(data[i] + 1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Посмотрим на boxplot числовых переменных по целевому параметру. А так же корреляцию."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "for i in num_cols:\n",
    "    plt.figure()\n",
    "    sns.boxplot(x='default', y=i, data=data_default)\n",
    "    plt.title(i)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c658cafd0>"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.heatmap(data_default[num_cols].corr().abs(), vmin=0, vmax=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Как мы видим, коррекляция между признакаи минимальна."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Для оценки значимости числовых переменных будем использовать функцию f_classif. В качестве меры значимости мы будем использовать значение f-статистики. Чем значение статистики выше, тем меньше вероятность того, что средние значения не отличаются, и тем важнее данный признак для нашей линейной модели."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c65925d90>"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imp_num = pd.Series(f_classif(data_default[num_cols], data_default['default'])[0], index = num_cols)\n",
    "imp_num.sort_values(inplace = True)\n",
    "imp_num.plot(kind = 'barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Бинарные признаки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>app_date</th>\n",
       "      <th>education</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>car</th>\n",
       "      <th>car_type</th>\n",
       "      <th>decline_app_cnt</th>\n",
       "      <th>good_work</th>\n",
       "      <th>score_bki</th>\n",
       "      <th>...</th>\n",
       "      <th>region_rating</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>income</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>foreign_passport</th>\n",
       "      <th>sample</th>\n",
       "      <th>default</th>\n",
       "      <th>app_day_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>74835</td>\n",
       "      <td>2014-03-22</td>\n",
       "      <td>GRD</td>\n",
       "      <td>1</td>\n",
       "      <td>3.401197</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.271884</td>\n",
       "      <td>...</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10.819798</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>17527</td>\n",
       "      <td>2014-01-24</td>\n",
       "      <td>SCH</td>\n",
       "      <td>0</td>\n",
       "      <td>3.688879</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.791759</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.504999</td>\n",
       "      <td>...</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>8.517393</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>75683</td>\n",
       "      <td>2014-03-23</td>\n",
       "      <td>UGR</td>\n",
       "      <td>1</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.691339</td>\n",
       "      <td>...</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10.308986</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>26883</td>\n",
       "      <td>2014-02-03</td>\n",
       "      <td>SCH</td>\n",
       "      <td>1</td>\n",
       "      <td>4.043051</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.374182</td>\n",
       "      <td>...</td>\n",
       "      <td>3.713572</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.741027</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>28862</td>\n",
       "      <td>2014-02-04</td>\n",
       "      <td>GRD</td>\n",
       "      <td>0</td>\n",
       "      <td>3.663562</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.487502</td>\n",
       "      <td>...</td>\n",
       "      <td>4.394449</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>11.695255</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 21 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   client_id   app_date education  sex       age  car  car_type  \\\n",
       "0      74835 2014-03-22       GRD    1  3.401197    1         1   \n",
       "1      17527 2014-01-24       SCH    0  3.688879    0         0   \n",
       "2      75683 2014-03-23       UGR    1  3.931826    1         1   \n",
       "3      26883 2014-02-03       SCH    1  4.043051    0         0   \n",
       "4      28862 2014-02-04       GRD    0  3.663562    0         0   \n",
       "\n",
       "   decline_app_cnt  good_work  score_bki  ...  region_rating  home_address  \\\n",
       "0         0.000000          0  -2.271884  ...       3.931826             1   \n",
       "1         1.791759          0  -1.504999  ...       3.931826             1   \n",
       "2         0.000000          0  -1.691339  ...       3.931826             1   \n",
       "3         0.000000          0  -2.374182  ...       3.713572             1   \n",
       "4         0.000000          0  -2.487502  ...       4.394449             2   \n",
       "\n",
       "   work_address     income  sna  first_time  foreign_passport  sample  \\\n",
       "0             2  10.819798    1           4                 0       0   \n",
       "1             2   8.517393    4           3                 0       0   \n",
       "2             2  10.308986    1           3                 1       0   \n",
       "3             2   9.741027    1           3                 0       0   \n",
       "4             3  11.695255    1           3                 0       0   \n",
       "\n",
       "   default  app_day_month  \n",
       "0       -1              3  \n",
       "1       -1              1  \n",
       "2       -1              3  \n",
       "3       -1              2  \n",
       "4       -1              2  \n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Для бинарных признаков мы будем использовать LabelEncoder\n",
    "\n",
    "label_encoder = LabelEncoder()\n",
    "\n",
    "for column in bin_cols:\n",
    "    data[column] = label_encoder.fit_transform(data[column])\n",
    "    \n",
    "# убедимся в преобразовании    \n",
    "data.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Категорианльные признаки"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Преобразуем данные в числа\n",
    "data.education = data.education.replace({'SCH':0, 'UGR':1, 'GRD':2, 'PGR':3, 'ACD':4, 'UNK':5})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>education</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>app_day_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>9790</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108888</th>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>87197</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7556</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37255</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        education  home_address  work_address  sna  first_time  app_day_month\n",
       "9790            0             1             1    2           2              3\n",
       "108888          0             2             3    4           3              4\n",
       "87197           0             1             3    1           3              2\n",
       "7556            2             2             3    1           3              1\n",
       "37255           2             1             3    1           2              4"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[cat_cols].sample(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Сделаем оценку значимости для категориальных и бинарных переменных"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "data_default = data[data.default >= 0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7f4c657dc750>"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "imp_cat = pd.Series(mutual_info_classif(data_default[bin_cols + cat_cols], data_default['default'],\n",
    "                                     discrete_features =True), index = bin_cols + cat_cols)\n",
    "imp_cat.sort_values(inplace = True)\n",
    "imp_cat.plot(kind = 'barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Подготовка данных для ML model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "education        6\n",
       "home_address     3\n",
       "work_address     3\n",
       "sna              4\n",
       "first_time       4\n",
       "app_day_month    4\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data[cat_cols].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 0., 1., ..., 0., 1., 0.],\n",
       "       [1., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 1., 0., ..., 0., 1., 0.],\n",
       "       ...,\n",
       "       [1., 0., 0., ..., 0., 0., 1.],\n",
       "       [1., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 1., ..., 0., 0., 0.]])"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_cat = OneHotEncoder(sparse = False).fit_transform(data[cat_cols].values)\n",
    "X_cat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(110148, 24)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_cat.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.41881524, -0.73558697, -0.43953103,  0.77056313,  0.68042509],\n",
       "       [ 4.53998904,  0.80003948, -0.43953103,  0.33379697, -2.6246238 ],\n",
       "       [-0.41881524,  0.42690838, -0.43953103, -0.28179035, -0.05283405],\n",
       "       ...,\n",
       "       [-0.41881524,  0.78474991,  1.61380664,  1.10934528,  0.52918572],\n",
       "       [-0.41881524,  0.85143237, -0.43953103,  0.77056313, -1.25318603],\n",
       "       [-0.41881524,  0.27998625, -0.43953103,  0.33379697, -0.31454282]])"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Стандартизация числовых переменных\n",
    "X_num = StandardScaler().fit_transform(data[num_cols].values)\n",
    "X_num"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Тренируем модель Логистической регрессии"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Завернем всю предобработку параметров для подачи в модель в функцию\n",
    "def df_to_model_input(data, cat_cols, bin_cols, num_cols):\n",
    "    ec = OneHotEncoder(sparse = False)\n",
    "    X_cat = ec.fit_transform(data[cat_cols].values)\n",
    "    X_num = StandardScaler().fit_transform(data[num_cols].values)\n",
    "    X = np.hstack([X_num, data[bin_cols].values, X_cat])\n",
    "    Y = data['default'].values    \n",
    "    return X, Y, [num_cols + bin_cols + ec.get_feature_names(cat_cols).tolist()][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разделим датасет на исходные пакеты train и test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_data = data.query('sample == 1').drop(['sample'], axis=1)\n",
    "test_data = data.query('sample == 0').drop(['sample'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Разделяем наш train на обучающую и тестовую части"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, Y, col = df_to_model_input(train_data, cat_cols, bin_cols, num_cols)\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, Y, test_size=0.20, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Функция для тренировки модели Логистической регрессии\n",
    "def train_model(X, Y):\n",
    "    model = LogisticRegression(max_iter=500)\n",
    "    model.fit(X_train, y_train)\n",
    "    return model\n",
    "\n",
    "# Функция оценки качества модели методом ROC-анализа\n",
    "def quality_control_model(model, X_test, y_test):\n",
    "    probs = model.predict_proba(X_test)\n",
    "    probs = probs[:,1]\n",
    "\n",
    "    fpr, tpr, threshold = roc_curve(y_test, probs)\n",
    "    roc_auc = roc_auc_score(y_test, probs)\n",
    "\n",
    "    plt.figure()\n",
    "    plt.plot([0, 1], label='Baseline', linestyle='--')\n",
    "    plt.plot(fpr, tpr, label = 'Regression')\n",
    "    plt.title('Logistic Regression ROC AUC = %0.3f' % roc_auc)\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.xlabel('False Positive Rate')\n",
    "    plt.legend(loc = 'lower right')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Обучаем нашу модель и выводим ее оценку качества на данных train\n",
    "model = train_model(X_train, y_train)\n",
    "quality_control_model(model, X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Поиск гиперпараметров GridSearchCV"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Лучшее Penalty: l2\n",
      "Лучшее C: 0.1\n"
     ]
    }
   ],
   "source": [
    "model_other = LogisticRegression(multi_class='ovr', class_weight='balanced', solver='liblinear',random_state=40)\n",
    "param_grid = [{'penalty':['l1'], 'C':[0.1, 1, 10], 'max_iter':[1000], 'tol':[1e-5]},\n",
    "             {'penalty':['l2'], 'C':[0.1, 1, 10], 'max_iter':[1000], 'tol':[1e-5]},\n",
    "             {'penalty':['none'], 'max_iter':[1000], 'tol':[1e-5]},]\n",
    "\n",
    "# Создаем сетку поиска\n",
    "gridsearch = GridSearchCV(model_other, param_grid, scoring='f1', n_jobs=-1, cv=5)\n",
    "\n",
    "best_model = gridsearch.fit(X_train, y_train)\n",
    "\n",
    "# View best hyperparameters\n",
    "print('Лучшее Penalty:', best_model.best_estimator_.get_params()['penalty'])\n",
    "print('Лучшее C:', best_model.best_estimator_.get_params()['C'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "quality_control_model(best_model, X_test, y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>app_date</th>\n",
       "      <th>education</th>\n",
       "      <th>sex</th>\n",
       "      <th>age</th>\n",
       "      <th>car</th>\n",
       "      <th>car_type</th>\n",
       "      <th>decline_app_cnt</th>\n",
       "      <th>good_work</th>\n",
       "      <th>score_bki</th>\n",
       "      <th>bki_request_cnt</th>\n",
       "      <th>region_rating</th>\n",
       "      <th>home_address</th>\n",
       "      <th>work_address</th>\n",
       "      <th>income</th>\n",
       "      <th>sna</th>\n",
       "      <th>first_time</th>\n",
       "      <th>foreign_passport</th>\n",
       "      <th>default</th>\n",
       "      <th>app_day_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18776</th>\n",
       "      <td>75368</td>\n",
       "      <td>2014-03-23</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.737670</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.526461</td>\n",
       "      <td>1.386294</td>\n",
       "      <td>4.110874</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.392745</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22277</th>\n",
       "      <td>33344</td>\n",
       "      <td>2014-02-09</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3.433987</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-2.446853</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>4.394449</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>10.596660</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2934</th>\n",
       "      <td>82979</td>\n",
       "      <td>2014-03-31</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.091042</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.098612</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.247931</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>4.394449</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>10.308986</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15111</th>\n",
       "      <td>59468</td>\n",
       "      <td>2014-03-08</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>3.218876</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>-2.030046</td>\n",
       "      <td>0.693147</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>10.126671</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33030</th>\n",
       "      <td>51155</td>\n",
       "      <td>2014-02-27</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3.218876</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>-1.774403</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.931826</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>9.615872</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>-1</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       client_id   app_date  education  sex       age  car  car_type  \\\n",
       "18776      75368 2014-03-23          0    0  3.737670    0         0   \n",
       "22277      33344 2014-02-09          1    1  3.433987    1         1   \n",
       "2934       82979 2014-03-31          0    0  3.091042    0         0   \n",
       "15111      59468 2014-03-08          0    1  3.218876    0         0   \n",
       "33030      51155 2014-02-27          0    0  3.218876    0         0   \n",
       "\n",
       "       decline_app_cnt  good_work  score_bki  bki_request_cnt  region_rating  \\\n",
       "18776         1.098612          0  -1.526461         1.386294       4.110874   \n",
       "22277         0.000000          0  -2.446853         1.098612       4.394449   \n",
       "2934          1.098612          0  -1.247931         0.693147       4.394449   \n",
       "15111         0.000000          1  -2.030046         0.693147       3.931826   \n",
       "33030         0.000000          0  -1.774403         0.000000       3.931826   \n",
       "\n",
       "       home_address  work_address     income  sna  first_time  \\\n",
       "18776             1             2   9.392745    4           1   \n",
       "22277             3             3  10.596660    1           3   \n",
       "2934              2             3  10.308986    1           4   \n",
       "15111             1             2  10.126671    4           1   \n",
       "33030             1             2   9.615872    1           4   \n",
       "\n",
       "       foreign_passport  default  app_day_month  \n",
       "18776                 0       -1              3  \n",
       "22277                 1       -1              2  \n",
       "2934                  0       -1              3  \n",
       "15111                 0       -1              3  \n",
       "33030                 0       -1              2  "
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.sample(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, Y, fn = df_to_model_input(test_data, cat_cols, bin_cols, num_cols)\n",
    "\n",
    "predict_submission = model.predict_proba(X)[:,1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert to the expected output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4647</th>\n",
       "      <td>44636</td>\n",
       "      <td>0.688076</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12990</th>\n",
       "      <td>70086</td>\n",
       "      <td>0.192000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20544</th>\n",
       "      <td>12165</td>\n",
       "      <td>0.142754</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       client_id   default\n",
       "4647       44636  0.688076\n",
       "12990      70086  0.192000\n",
       "20544      12165  0.142754"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sample_submission.sample(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>client_id</th>\n",
       "      <th>default</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>10132</th>\n",
       "      <td>15043</td>\n",
       "      <td>0.048906</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15554</th>\n",
       "      <td>69571</td>\n",
       "      <td>0.141970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16927</th>\n",
       "      <td>25768</td>\n",
       "      <td>0.144150</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21771</th>\n",
       "      <td>35421</td>\n",
       "      <td>0.219775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8942</th>\n",
       "      <td>9909</td>\n",
       "      <td>0.070527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26654</th>\n",
       "      <td>70897</td>\n",
       "      <td>0.114890</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29643</th>\n",
       "      <td>50631</td>\n",
       "      <td>0.335521</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16327</th>\n",
       "      <td>23592</td>\n",
       "      <td>0.153644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10977</th>\n",
       "      <td>69442</td>\n",
       "      <td>0.042759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23836</th>\n",
       "      <td>66167</td>\n",
       "      <td>0.130826</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       client_id   default\n",
       "10132      15043  0.048906\n",
       "15554      69571  0.141970\n",
       "16927      25768  0.144150\n",
       "21771      35421  0.219775\n",
       "8942        9909  0.070527\n",
       "26654      70897  0.114890\n",
       "29643      50631  0.335521\n",
       "16327      23592  0.153644\n",
       "10977      69442  0.042759\n",
       "23836      66167  0.130826"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "submission = pd.DataFrame()\n",
    "submission[\"client_id\"] = test_data.client_id\n",
    "submission[\"default\"] = predict_submission\n",
    "submission.sample(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Save resuts for submission"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv('submission.csv', index=False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
